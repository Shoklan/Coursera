round(pnorm(70, mean = 80, sd=10))
?pnorm
round(pnorm(70, mean = 80, sd=10. lower.tail = T))
round(pnorm(70, mean = 80, sd=10, lower.tail = T))
round(qnorm(95, mean = 1100, sd = 75))
round(qnorm(.95, mean = 1100, sd = 75))
150/10
?ppois()
ppoios(10, 5, lower.tail = T)
ppois(10, 5, lower.tail = T)
ppois(5, 10, lower.tail = T)
75*75
75*75 / 10
answer <- sum(.25, .6, .15)
answer
if (answer == 1)
if (answer == 1) print(TRUE)
answer <- sum(.25, .6, .2)
if (answer == 1) print(TRUE)
library(nlme)
library(lattice)
xyplot(weight~Time| Deit, BodyWeight)
xyplot(weight~Time| Diet, BodyWeight)
?text
?axis
?llines
?par
?trellis.par.set()
library(datasets)
data("airquality")
class(airquality$Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
movies
g <- ggplot(movies, aes(votes, rating))
print(g)
pnorm(93, mean = 100, sd = 10)
-7/10
1/2^2
1/3^2
1/4^2
k <- c(1,2,3,4)
chebyTheorum <- (1 - 1/k^2)
print(chebyTheorum)
.88 * .05 / (.88 * .05 + .12* .95)
1 - .88
qnorm(.05, mean = 100, sd = 10, lower.tail = F)
?pnorm
pbinom(4, prob = .5, size =6, lower.tail = F)
?qbinom
pnorm(.7, mean = 80, sd = 10)
pnorm(70, mean = 80, sd = 10)
qnorm(.95, mean = 1100, sd = 75)
qnorm(95, mean = 1100, sd = 75)
qnorm(.95, mean = 1100, sd = 75)
qnorm(.95, mean = 1100, sd = 75^2/sqrt(100))
qnorm(.95, mean = 1100, sd = 75/sqrt(100))
pbinom(5, 4, lower.tail = F)
pbinom(5, 4, .5, lower.tail = F)
pbinom(5, size=4, prob=.5, lower.tail=F)
pbinom(4, size=5, prob=.5, lower.tail=F)
sqrt(1/12)
(1/12)/ sqrt(1000)
ppois(10, 5 * 3)
6/8
.5^4
.5^5
round(pbinom(4, prob=.5, size = 5, lower.tail = F))
round(pbinom(3, prob=.5, size = 5, lower.tail = F))
round(pbinom(3, prob=.5, size = 5, lower.tail = F))
pbinom(3, prob=.5, size = 5, lower.tail = F)
?var
10/sqrt(100)
1 - 1/2^2
7/8
7/8 + 5/6
(7/8 + 5/6)/2
?qnorm
?t.test()
mn = 1100
std
std = 30
mn + c(1,-1) * qt(.975, 8) * 30/sqrt(9)
2 *sqrt(9)/qt(.975)
2 *sqrt(9)/qt(.975, 8)
2 + c(-1,1) * qt(.975, 9) * 30/sqrt(10)
2 + c(-1,1) * qt(.975, 9) * (1/.68 + 1/.60)/sqrt(10)
?t.test()
t.test(2)
t.test(2, 9)
-2 + c(-1,1) * qt(.975, 9) * (1/.68 + 1/.60)/sqrt(10)
-2 + c(-1,1) * qt(.975, 9) * (1/.68 + 1/.60)/sqrt(10)
2 + c(-1,1) * qt(.975, 9) * (1/.68 + 1/.60)/sqrt(10)
t.test(3,5, var.equal = T)
qnorm(-2)
?qnorm
qnorm(.975)
2 + c(-1,1) * qt(.975, 9) * (1/.68 + 1/.60)/sqrt(10)
(1/.68 + 1/.60)/sqrt(10)
2 + c(-1,1) * qt(.975, 9) * (1/sqrt(.68) + 1/sqrt(.60)/sqrt(10)
)
2 + c(-1,1) * qt(.975, 9) * (1/sqrt(.68) + 1/sqrt(.60))/sqrt(10)
2 + c(-1,1) * qt(.975, 9) * (1/sqrt(.68) + 1/sqrt(.60))/sqrt(20)
2 + c(-1,1) * qt(.95, 9) * (1/sqrt(.68) + 1/sqrt(.60))/sqrt(20)
2 + c(-1,1) * qt(.95, 9) * (1/.68 + 1/.60)/sqrt(20)
2 + c(-1,1) * qt(.95, 9) * (1/.68 + 1/.60)/sqrt(10)
qt(.95, 19)
2 + c(-1,1) * qt(.95, 19) * (1/.68 + 1/.60)/sqrt(20)
2 + c(-1,1) * qt(.95, 19) * (1/sqrt(.68) + 1/sqrt(.60)/sqrt(20)
)
(-3-1) + c(-1,1) * qt(.975, 8) * (1/1.5 + 1/.1.8)/sqrt(9))
(-3-1) + c(-1,1) * qt(.975, 8) * (1/1.5 + 1/.1.8)/sqrt(9)
-4 + c(-1,1) * qt(.975, 8) * (1/1.5 + 1/.1.8)/sqrt(9)
(-4) + c(-1,1) * qt(.975, 8) * (1/1.5 + 1/.1.8)/sqrt(9)
c(-1,1) * qt(.975, 8) * (1/1.5 + 1/.1.8)/sqrt(9)
-4 + c(-1,1) * qt(.975, 8) * (1/1.5 + 1/.1.8)/sqrt(9)
-4 + c(-1,1) * qt(.975, 8) * (1/1.5 + 1/.1.8)/sqrt(9)
-4 + c(-1,1) * qt(.975, 8)
-4 + c(-1,1) * qt(.975, 8) * (1/1.5 + 1/.1.8)/sqrt(9)
(1/1.5 + 1/.1.8)/sqrt(9)
-4 + c(-1,1) * qt(.975, 8) * (1/1.5 + 1/1.8)/sqrt(9)
n1 <- 9
n2 <- 9
s1 <- 1.5
s2 <- 1.8
spsq <- ((n1 - 1) * s1^2 + (n2-1) * s2^2) / (n1 + n2 -2)
-4 + c(-1,1) * qt(.90, 8) * spsq/sqrt(9)
-4 + c(-1,1) * qt(.90, 8) * spsq/sqrt(18)
-4 + c(-1,1) * qt(.90, 8) * spsq/sqrt(9)
-4 + c(-1,1) * qt(.90, 8) * sqrt(spsq)/sqrt(9)
-4 + c(-1,1) * qt(.90, 8) * spsq/sqrt(9)
-2 + c(-1,1) * qt(.90, 8) * spsq/sqrt(9)
-2 + c(-1,1) * qt(.90, 8) * sqrt(spsq)/sqrt(9)
-4 + c(-1,1) * qt(.90, 8) * sqrt(spsq)/sqrt(9)
-4 + c(-1,1) * qt(.90, 17) * sqrt(spsq)/sqrt(18)
source("http://bioconductor.org/biocLite.R")
library(BiocInstaller)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key="e0171eb715a95d584619", secret="482d6134a01636f265ccbd1e6c73c843bc5ecbfe")
github_token <<- oauth2.0_token(oath_endpoints("github"), myapp)
github_token <<- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("sqldf")
library("sqldf")
?"sqldf"
data <- url("http://biostat.jhsph.edu/~jleek/contact.html")
data
?nchar()
nchar(data)
data <- download.file
data <- download.file("http://biostat.jhsph.edu/~jleek/contact.html ")
download.file("http://biostat.jhsph.edu/~jleek/contact.html", destfile="random.html")
data <- read.table("random.html")
data
data <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
data
content2 <- content(data, as="text")
content
content2
nchar(content2)
setwd("D:\Code\Coursera\CleaningData\Quiz3")
setwd("D:\\Code\\Coursera\\CleaningData\\Quiz3")
GDPUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
EducationUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
gdp <- read.csv(GDPUrl, "gpd.csv")
download.file(GDPUrl)
download.file(GDPUrl, destfile = "gpd.csv")
gdp <- read.csv("gpd.csv")
EducationUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(EducationUrl, destfile = "edu.csv")
edu <- read.csv("edu.csv")
str(edu)
str(gdp)
finalResult <- merge(edu, gdp, by.x = "CountryCode", by.y = "X", all= T)
str(finalResult)
finalResult <- merge(edu, gdp, by.x = "CountryCode", by.y = "X")
str(finalResult)
library(dplyr)
str(finalResult)
dataArrange[13,]
dataArrange <- arrange(finalResult, desc(Gross.Domestic.product.2012))
dataArrange <- arrange(finalResult, desc("Gross.Domestic.product.2012"))
dataArrange <- arrange(finalResult, desc(Gross.domestic.product.2012))
dataArrange[13,]
dataArrange$Gross.domestic.product.2012 <- as.numeric(dataArrange$Gross.domestic.product.2012)
dataArrange <- arrange(finalResult, desc(Gross.domestic.product.2012))
dataArrange[13,]
head(select(dataArrange, CountryCode, Gross.domestic.product.2012), 15)
class(dataArrange$Gross.domestic.product.2012)
dataArrange$Gross.domestic.product.2012 <- as.numeric(dataArrange$Gross.domestic.product.2012)
class(dataArrange$Gross.domestic.product.2012)
dataArrange <- arrange(finalResult, desc(Gross.domestic.product.2012))
head(select(dataArrange, CountryCode, Gross.domestic.product.2012), 15)
class(dataArrange$Gross.domestic.product.2012)
dataArrange[14,]
select(dataArrange, CountryCode, Gross.domestic.product.2012)
dataArrange$Gross.domestic.product.2012 <- as.numeric(dataArrange$Gross.domestic.product.2012)
select(dataArrange, CountryCode, Gross.domestic.product.2012)
finalResult <- merge(edu, gdp, by.x = "CountryCode", by.y = "X", all = T)
dataArrange$Gross.domestic.product.2012 <- as.numeric(dataArrange$Gross.domestic.product.2012)
dataArrange <- arrange(finalResult, desc(Gross.domestic.product.2012))
select(dataArrange, CountryCode, Gross.domestic.product.2012)
finalResult <- merge(edu, gdp, by.x = "CountryCode", by.y = "X")
dataArrange$Gross.domestic.product.2012 <- as.numeric(dataArrange$Gross.domestic.product.2012)
dataArrange <- arrange(finalResult, desc(Gross.domestic.product.2012))
select(dataArrange, CountryCode, Gross.domestic.product.2012)
dataArrange <- arrange(finalResult, desc(Gross.domestic.product.2012))
select(dataArrange, CountryCode, Gross.domestic.product.2012)
class(dataArrange$Gross.domestic.product.2012)
dataArrange$Gross.domestic.product.2012 <- as.numeric(dataArrange$Gross.domestic.product.2012)
select(dataArrange, CountryCode, Gross.domestic.product.2012)
str(resultResult)
str(finalResult)
finalResult$Income.Group
levels(finalResult$Income.Group)
mean(filter(finalResult, Income.Group == "High income: OECD")[,"Gross.domestic.product.2012"])
temp <- filter(finalResult, Income.Group == "High income: OECD")[,"Gross.domestic.product.2012"]
head(temp$Income.Group)
head(temp)
mean(temp, rm.na = T)
mean(as.numeric(temp), rm.na = T)
temp <- filter(finalResult, Income.Group == "High income: nonOECD")[,"Gross.domestic.product.2012"]
mean(as.numeric(temp), rm.na = T)
