install.packages("plyr")
data(iris)
funcD1 <- function(dtChunk){
result <- mean(dtIris$Sepal.Length)
return(result)
}
dlply(.data = iris, .variables = "Species", .fun = funcD1)
library(plyr)
dlply(.data = iris, .variables = "Species", .fun = funcD1)
funcD1 <- function(dtChunk){
result <- mean(Iris$Sepal.Length)
return(result)
}
library(plyr)
dlply(.data = iris, .variables = "Species", .fun = funcD1)
iris
funcD1 <- function(dtChunk){
result <- mean(iris$Sepal.Length)
return(result)
}
library(plyr)
dlply(.data = iris, .variables = "Species", .fun = funcD1)
install.packages("data.table")
?chron
vingette(chron)
vignette(chron)
help("titanic)
help("titanic")
help("Titanic")
class(Titanic)
Titanic
dfTitanic <- data.frame(Titanic)
str(dfTitanic)
dtSurvived <- dtTitanic[, list(n=sum(Freq)), by="Survived"]
dfSurvived <- dtTitanic[, list(n=sum(Freq)), by="Survived"]
dtSurvived <- dfTitanic[, list(n=sum(Freq)), by="Survived"]
library(data.table)
dtTitanic = data.table(dfTitanic)
dtSurvived <- dfTitanic[, list(n=sum(Freq)), by="Survived"]
dtSurvived <- dtTitanic[, list(n=sum(Freq)), by="Survived"]
vector.height = dtSurvived[, n]
vector.Names = dtSurvived[, Survived]
dtSurvived
barplot(height = vector.height, names.arg = vector.Names)
dtSurvived[, percentage := n/sum(n)]
dtSurvived[, colorPlot := ifelse(Survived == 'Yes', 'blue', 'red')]
barplot(height = dtSurvived[, percentage], names.arg = dtSurvived[,Survived], col= dtSurvived[, colorPlot], ylim= c(0,1))
e
ln
exp(1)
plot(exp(1)^(-1/x))
x = 0:36
plot(exp(1)^(-1/x))
plot(exp(1)^(-1/x), type = 'l')
plot(exp(1)^(-1/x) - 1, type = 'l')
plot((exp(1)^(-1/x) -1) , type = 'l')
plot((exp(1)^(-1/x)-) , type = 'l', ylim = c(0, 1))
plot( (exp(1)^(-1/x)-1) , type = 'l', ylim = c(0, 1) )
plot( (exp(1)^(-1/x)-.5) , type = 'l', ylim = c(0, 1) )
plot( (exp(2)^(-1/x)-) , type = 'l', ylim = c(0, 1) )
plot( (exp(2)^(-1/x)) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/x)) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/(x - 1))) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/x)) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.6) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.65) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.62) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.63) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/x) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/2x) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/(2x)) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/(2x)) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(2*x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(3*x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(.5*x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot(x^3 +x +1, type = 'l')
plot(x^3 -x +1, type = 'l')
plot(x^5 -x +1, type = 'l')
plot(x^5 -x +1, type = 'l')
plot(x^7 -x +1, type = 'l')
plot(x^3 -7*x +1, type = 'l')
plot(-x^3 -7*x +1, type = 'l')
plot((x-2)^3 -7*x +1, type = 'l')
plot((x-2)^3 -15*x +1, type = 'l')
plot((x+2)^3 -7*x +1, type = 'l')
plot((x+.2)^3 .1*x .1, type = 'l')
plot((x+.2)^3 .1*x + .1, type = 'l')
plot((x + .2)^3 + .1*x + .1, type = 'l')
plot(x^3)
plot(x^2)
plot(x^17)
plot(x^.17)
plot(x^.05)
plot(x^.5)
plot(x^2 + 5x + 5)
plot(x^2 + 5*x + 5)
plot(x^2 - 5*x + 5)
plot(-x^2 - 5*x + 5)
plot((x-1)^2 - 5*x + 5)
plot((x-7)^2 - 5*x + 5)
plot((x-7)^2 - 15*x + 5)
plot((x-5)^3 - 15*x + 5)
plot((x-5)^3 - 5*x + 5)
plot((x-20)^3 - 5*x + 5)
plot((x-100)^3 - 5*x + 5)
plot((x-309)^3 - 5*x + 5)
plot((x-30)^3 - 5*x + 5)
plot((x-5)^3 - 5*x + 5)
plot((x-7)^3 - 5*x + 5)
plot((x-7)^5 - 5*x + 5)
plot((x-7)^3 - 5*x + 5)
plot((x-7)^3 - 15*x + 5)
plot((x-7)^3 - 15*x + 20)
plot((x-7)^3 - 15*x + 1)
plot((x-9)^3 - 15*x + 1)
plot((x-9)^3 - 5*x + 1)
plot((x-9)^3 - 5*x + 1)
plot((x-13)^3 - 5*x + 1)
plot((x-14)^3 - 5*x + 1)
plot((x-15)^3 - 5*x + 1)
plot((x-15)^3 - 6*x + 1)
plot((x-15)^3 - 2*x + 1)
plot((x-15)^3 + 1)
plot((x-17)^3 + 1)
plot((x-.17)^3 + .11)
plot((x-.17)^3 + .1)
plot((x-.57)^3 + .1)
plot((x-1)^3 + .1)
plot((x-3)^3 + .1)
plot((x-7)^3 + .1)
plot((x-11)^3 + .1)
plot((x-15)^3 + .1)
source('~/Docs/code/Coursera/DataSpec/CleaningData/ProgAssignment/Run_Analysis.R', encoding = 'UTF-8')
setwd("C:\\Users\\mitcolli\\Documents\\Docs\\code\\Coursera\\DataSpec\\CleaningData\\Project")
getwd()
timestamp <- Sys.Date()
list.dirs(recursive = TRUE)
list.files(recursive = TRUE)
files.list <- list.files(recursive = TRUE)
files.list <- list.files(recursive = TRUE)
files.list
files <- strsplit(files.list, sep = "/")
files <- strsplit(files.list, split = "/")
files
files[[7]][4]
files[[7]][5]
files[[7]][6]
for(counter in 1:length(files)){
if(!is.na(searchFile[[counter]][5])){ print(searchFile[[counter]][5]))}
}
if(!is.na(searchFile[[counter]][5])) print(searchFile[[counter]][5]))
if(!is.na(searchFile[[counter]][5])) print(searchFile[[counter]][5])
for(counter in 1:length(files)){
if(!is.na(files[[counter]][5])) print(files[[counter]][5])
}
uniqueList <- vector()
for(counter in 1:length(files)){
if(!is.na(files[[counter]][5]))  uniqueList <- c(uniqueList, unique([[counter]][5]))
}
uniqueList <- vector()
uniqueList <- vector()
for(counter in 1:length(files)){
if(!is.na(files[[counter]][5]))
uniqueList <- c(uniqueList, unique([[counter]][5])
}
uniqueList <- vector()
uniqueList <- vector()
for(counter in 1:length(files)){
if(!is.na(files[[counter]][5]))
uniqueList <- c(uniqueList, unique(files[[counter]][5]))
}
print(uniqueList)
grep("body_acc_x", uniqueList)
?read.fwf
completepath
files.list
2048/16
readFileData <- function(targetfile){
#fwfPattern <- c(-2, 14)
fwfPattern <- c(14)
df = read.fwf(targetfile, fwfPattern, sep="  ")
return(df)
}
getwd()
file.exists("data//UCI HAR Dataset//test//Inertial Signals//body_acc_x_test.txt")
pattern = "data/UCI HAR Dataset/test/Inertial Signals/body_acc_x_test.txt"
file.exists(pattern)
temp = readFileData(pattern)
?rep
fwfPattern <- rep(c(-2, 14), times = 128)
fwfPattern
readFileData <- function(targetfile){
fwfPattern <- rep(c(-2, 14), times = 128)
df = read.fwf(targetfile, fwfPattern)
return(df)
}
temp = readFileData(pattern)
names(temp)
temp$V1
temp$V1[1]
?read.fwf()
readFileData <- function(targetfile){
# fwfPattern <- rep(c(-2, 14), times = 128)
fwfPattern <- c(-2, 14)
df = read.fwf(targetfile, fwfPattern)
return(df)
}
temp = readFileData(pattern)
head(temp)
print(1.0128170e+000)
tail(temp)
readFileData <- function(targetfile){
# fwfPattern <- rep(c(-2, 14), times = 128)
fwfPattern <- c(-1, 14)
df = read.fwf(targetfile, fwfPattern, sep = "\n")
return(df)
}
temp = readFileData(pattern)
head(temp)
tail(temp)
readFileData <- function(targetfile){
# fwfPattern <- rep(c(-2, 14), times = 128)
fwfPattern <- c(-1, 15)
df = read.fwf(targetfile, fwfPattern, sep = "\n")
return(df)
}
temp = readFileData(pattern)
head(temp)
readFileData <- function(targetfile){
# fwfPattern <- rep(c(-2, 14), times = 128)
fwfPattern <- c(-1, 15)
df = read.fwf(targetfile, fwfPattern)
return(df)
}
temp = readFileData(pattern)
temp(head)
temp = readFileData(pattern)
temp
head(temp)
pattern
readFileData <- function(targetfile){
fwfPattern <- rep(c(-2, 14), times = 128)
df = read.fwf(targetfile, fwfPattern)
return(df)
}
temp = readFileData(pattern)
files <- strsplit(files.list, split = "/")
files
uniqueList
patternList <- c("body_acc_x", "body_acc_y", "body_acc_z", "body_gyro_x", "body_gyro_y", "body_gyro_z",
"total_acc_x", "total_acc_y", "total_acc_z", "body_acc_x", "body_acc_y", "body_acc_z",
"body_gyro_x", "body_gyro_y", "body_gyro_z", "total_acc_x", "total_acc_y", "total_acc_z")
TEMP
temp
for(pattern in patternList){
indexes <- grep(pattern, files.list)
print(indexes)
}
for(pattern in patternList){
indexes <- grep(pattern, files.list)
print(indexes)
print(files.list[indexes])
readline()
}
for(pattern in patternList){
indexes <- grep(pattern, files.list)
print(indexes)
print(files.list[indexes])
}
indexes = data.frame()
indexes = data.frame()
for(pattern in patternList){
indexes <- rbind(indexes, grep(pattern, files.list))
print(indexes)
print(files.list[indexes])
}
pattern
grep(pattern, files.list)
class(grep(pattern, files.list))
is.list(grep(pattern, files.list))
indexes = data.frame()
for(pattern in patternList){
indexes <- rbind(indexes, grep(pattern, files.list))
print(indexes)
}
indexes = data.frame()
for(pattern in patternList){
indexes <- rbind(indexes, grep(pattern, files.list))
}
print(indexes)
patternList <- c("body_acc_x", "body_acc_y", "body_acc_z", "body_gyro_x", "body_gyro_y", "body_gyro_z",
"total_acc_x", "total_acc_y", "total_acc_z")
indexes = data.frame()
for(pattern in patternList){
indexes <- rbind(indexes, grep(pattern, files.list))
}
print(indexes)
indexes
files.list[c(indexes[1,])]
indexes[1,]
typeof(indexes[1,])
typeof(unlist(indexes[1,]))
files.list[unlist(indexes[1,]))]
files.list[unlist(indexes[1,])]
files.list
#     $Walking
library(dplyr)
