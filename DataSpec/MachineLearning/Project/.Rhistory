install.packages("plyr")
data(iris)
funcD1 <- function(dtChunk){
result <- mean(dtIris$Sepal.Length)
return(result)
}
dlply(.data = iris, .variables = "Species", .fun = funcD1)
library(plyr)
dlply(.data = iris, .variables = "Species", .fun = funcD1)
funcD1 <- function(dtChunk){
result <- mean(Iris$Sepal.Length)
return(result)
}
library(plyr)
dlply(.data = iris, .variables = "Species", .fun = funcD1)
iris
funcD1 <- function(dtChunk){
result <- mean(iris$Sepal.Length)
return(result)
}
library(plyr)
dlply(.data = iris, .variables = "Species", .fun = funcD1)
install.packages("data.table")
?chron
vingette(chron)
vignette(chron)
help("titanic)
help("titanic")
help("Titanic")
class(Titanic)
Titanic
dfTitanic <- data.frame(Titanic)
str(dfTitanic)
dtSurvived <- dtTitanic[, list(n=sum(Freq)), by="Survived"]
dfSurvived <- dtTitanic[, list(n=sum(Freq)), by="Survived"]
dtSurvived <- dfTitanic[, list(n=sum(Freq)), by="Survived"]
library(data.table)
dtTitanic = data.table(dfTitanic)
dtSurvived <- dfTitanic[, list(n=sum(Freq)), by="Survived"]
dtSurvived <- dtTitanic[, list(n=sum(Freq)), by="Survived"]
vector.height = dtSurvived[, n]
vector.Names = dtSurvived[, Survived]
dtSurvived
barplot(height = vector.height, names.arg = vector.Names)
dtSurvived[, percentage := n/sum(n)]
dtSurvived[, colorPlot := ifelse(Survived == 'Yes', 'blue', 'red')]
barplot(height = dtSurvived[, percentage], names.arg = dtSurvived[,Survived], col= dtSurvived[, colorPlot], ylim= c(0,1))
e
ln
exp(1)
plot(exp(1)^(-1/x))
x = 0:36
plot(exp(1)^(-1/x))
plot(exp(1)^(-1/x), type = 'l')
plot(exp(1)^(-1/x) - 1, type = 'l')
plot((exp(1)^(-1/x) -1) , type = 'l')
plot((exp(1)^(-1/x)-) , type = 'l', ylim = c(0, 1))
plot( (exp(1)^(-1/x)-1) , type = 'l', ylim = c(0, 1) )
plot( (exp(1)^(-1/x)-.5) , type = 'l', ylim = c(0, 1) )
plot( (exp(2)^(-1/x)-) , type = 'l', ylim = c(0, 1) )
plot( (exp(2)^(-1/x)) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/x)) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/(x - 1))) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/x)) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.6) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.65) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.62) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.63) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/x) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/2x) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/(2x)) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/(2x)) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(2*x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(3*x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(.5*x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot(x^3 +x +1, type = 'l')
plot(x^3 -x +1, type = 'l')
plot(x^5 -x +1, type = 'l')
plot(x^5 -x +1, type = 'l')
plot(x^7 -x +1, type = 'l')
plot(x^3 -7*x +1, type = 'l')
plot(-x^3 -7*x +1, type = 'l')
plot((x-2)^3 -7*x +1, type = 'l')
plot((x-2)^3 -15*x +1, type = 'l')
plot((x+2)^3 -7*x +1, type = 'l')
plot((x+.2)^3 .1*x .1, type = 'l')
plot((x+.2)^3 .1*x + .1, type = 'l')
plot((x + .2)^3 + .1*x + .1, type = 'l')
plot(x^3)
plot(x^2)
plot(x^17)
plot(x^.17)
plot(x^.05)
plot(x^.5)
plot(x^2 + 5x + 5)
plot(x^2 + 5*x + 5)
plot(x^2 - 5*x + 5)
plot(-x^2 - 5*x + 5)
plot((x-1)^2 - 5*x + 5)
plot((x-7)^2 - 5*x + 5)
plot((x-7)^2 - 15*x + 5)
plot((x-5)^3 - 15*x + 5)
plot((x-5)^3 - 5*x + 5)
plot((x-20)^3 - 5*x + 5)
plot((x-100)^3 - 5*x + 5)
plot((x-309)^3 - 5*x + 5)
plot((x-30)^3 - 5*x + 5)
plot((x-5)^3 - 5*x + 5)
plot((x-7)^3 - 5*x + 5)
plot((x-7)^5 - 5*x + 5)
plot((x-7)^3 - 5*x + 5)
plot((x-7)^3 - 15*x + 5)
plot((x-7)^3 - 15*x + 20)
plot((x-7)^3 - 15*x + 1)
plot((x-9)^3 - 15*x + 1)
plot((x-9)^3 - 5*x + 1)
plot((x-9)^3 - 5*x + 1)
plot((x-13)^3 - 5*x + 1)
plot((x-14)^3 - 5*x + 1)
plot((x-15)^3 - 5*x + 1)
plot((x-15)^3 - 6*x + 1)
plot((x-15)^3 - 2*x + 1)
plot((x-15)^3 + 1)
plot((x-17)^3 + 1)
plot((x-.17)^3 + .11)
plot((x-.17)^3 + .1)
plot((x-.57)^3 + .1)
plot((x-1)^3 + .1)
plot((x-3)^3 + .1)
plot((x-7)^3 + .1)
plot((x-11)^3 + .1)
plot((x-15)^3 + .1)
tempFrame
if(tempFile)
if(tempFile) print("derp")
is.name(tempFile)
is.environment(tempFile)
is.environment(tempFrame)
tempFrame = NA
if(tempFrame)
print("derp")
?cbind
?save
install.packages("caret")
library(caret)
install.packages("kernlab")
library(kernlab)
createDataPartition()
createDataPartition
?any
data = read.csv("C:\\Users\\mitcolli\\Downloads\\storage\\code\\chapter 5")
data = read.csv("C:\\Users\\mitcolli\\Downloads\\storage\\code\\chapter 5\mushrooms.csv")
data = read.csv("C:\\Users\\mitcolli\\Downloads\\storage\\code\\chapter 5\\mushrooms.csv")
data = read.csv("C:\\Users\\mitcolli\\Downloads\\storage\\code\\chapter 5\\mushrooms.csv". stringsAsFactors = TRUE)
data = read.csv("C:\\Users\\mitcolli\\Downloads\\storage\\code\\chapter 5\\mushrooms.csv", stringsAsFactors = TRUE)
str(data)
data$veil_type <- NULL
table(mushrooms$type)
table(data$type)
install.packages("RWeka")
library(RWeka)
?formula
formula
namespace
?namespace
data_1R <- oneR(type ~ ., data = data)
data_1R <- OneR(type ~ ., data = data)
data_1R
names(data_1R)
data_1R$call
type(data_1R)
class(data_1R)
data_1R$classifier
data_1R$levels
data_1R$terms
?attr
?object
?Jrip
?JRip
print(z)
data_JRip <- JRip(type ~ ., data = data)
data_JRip
library(data.table)
trainingDataURL = "https://eventing.coursera.org/api/redirectStrict/CwuaazM9omqkquUb0kdE2WvGIqJWicejJ8kjpkB78yXFFlkDBFgr3Zgk1SFCMk4jGOPWMIvJ4uOqfAnf8exPpA.dVzkb1v7Is_JCDbfEkqecA.lD2kq0SU6lv2BDl7rsQIzR57PZ87TCjxLvpNgPQQf8L-fxIjZ_TjZDeWqJ3A8eKHvrpshTdzRoeZKt1IWPMwQA6FOTnQJpsiFqkKVFBphqqBXynjwE6pPiLOWu4FP3Q9tiWN80k4bAehhH3xKTaOT0qfKZjqplvV2xQ1ChHe9Se4Uxw3xESl-N2MdJ_zV2RkgUC8zfjLrhms-o0gQUzSvp6BIQDEVg9mAQX3KGKQBRu5UpAyaM9VhgLD5tmbO-LcucvtaqrOYWPIp3lY-80n3mBY4yH9sZ3ldf7BnnpTv13zWvvBgdzXLM9R1pJRo7hHxeAu1OX3dou3OqD1NbkKGWtLFlUvcZZ_qCwUb4SzzAhuVMWXCZh9o3fYAxZbINKTw3UVoDIKzhW-iI4mBIlsow"
testDataURl = "https://eventing.coursera.org/api/redirectStrict/Qc6T7BB7RVg2nSemuqUbhQ0sdtJZTTJQl-wCp1qpsVY08d5T2E6vy5jrOc6nNYzZvxndjFQ9QbkIiUNZOsgZcg.Y7LLZ5woJtigj1k2FTLmwA.64l5XrOiPtGcCW8eKBcbM6MzAkKnAaz_5lpKgA6TdotjzOFT3PmiIh3fQ6_HaFEUOkVatENllGtub9WyVi0OccD4yznCfr4pFBSUHPvQidPZzc3k5AWjhenWtWXkVt2VuQfkOI7mkSCuHzLyAb1Rq6KyFNMIe_6Nu4kgT5bgGIhZrPqyPsIOXfUgIzeJbrUUH-5s2aMehCHxuRRYwqVsBQP5crSotABhvyGz2sBqiBK7KYK8uKbJ4XuUNn2zGQa6NK1KJSkTT_Gw6RCqBCHFy2SG3yGc6KSFNgKpOx8NhSDQ_t8J-gGgofOQQ92AhWjdIBapNgZk7sQi57CNYzDV2yiPKJNCQGRujh9TQACQZSjvOsUbrt0NiszslLqiq8PxfxAvmXdzn-hqyxnRW1Je8Q"
results = list(date = Sys.Date())
results$date
results = list(Date = Sys.Date())
Sys.time()
results = list(Date = Sys.Time())
results = list(Date = Sys.time())
results$Date
collectData = function(){
return("alpha", "beta")
}
collectData()
x >> trainingData
x ->> trainingData
x = 5
x ->> trainingData
trianingData
trainingData
train <- read.csv(url1)
test  <- read.csv(url2)
trainingDataURL = "https://eventing.coursera.org/api/redirectStrict/CwuaazM9omqkquUb0kdE2WvGIqJWicejJ8kjpkB78yXFFlkDBFgr3Zgk1SFCMk4jGOPWMIvJ4uOqfAnf8exPpA.dVzkb1v7Is_JCDbfEkqecA.lD2kq0SU6lv2BDl7rsQIzR57PZ87TCjxLvpNgPQQf8L-fxIjZ_TjZDeWqJ3A8eKHvrpshTdzRoeZKt1IWPMwQA6FOTnQJpsiFqkKVFBphqqBXynjwE6pPiLOWu4FP3Q9tiWN80k4bAehhH3xKTaOT0qfKZjqplvV2xQ1ChHe9Se4Uxw3xESl-N2MdJ_zV2RkgUC8zfjLrhms-o0gQUzSvp6BIQDEVg9mAQX3KGKQBRu5UpAyaM9VhgLD5tmbO-LcucvtaqrOYWPIp3lY-80n3mBY4yH9sZ3ldf7BnnpTv13zWvvBgdzXLM9R1pJRo7hHxeAu1OX3dou3OqD1NbkKGWtLFlUvcZZ_qCwUb4SzzAhuVMWXCZh9o3fYAxZbINKTw3UVoDIKzhW-iI4mBIlsow"
testDataURl = "https://eventing.coursera.org/api/redirectStrict/Qc6T7BB7RVg2nSemuqUbhQ0sdtJZTTJQl-wCp1qpsVY08d5T2E6vy5jrOc6nNYzZvxndjFQ9QbkIiUNZOsgZcg.Y7LLZ5woJtigj1k2FTLmwA.64l5XrOiPtGcCW8eKBcbM6MzAkKnAaz_5lpKgA6TdotjzOFT3PmiIh3fQ6_HaFEUOkVatENllGtub9WyVi0OccD4yznCfr4pFBSUHPvQidPZzc3k5AWjhenWtWXkVt2VuQfkOI7mkSCuHzLyAb1Rq6KyFNMIe_6Nu4kgT5bgGIhZrPqyPsIOXfUgIzeJbrUUH-5s2aMehCHxuRRYwqVsBQP5crSotABhvyGz2sBqiBK7KYK8uKbJ4XuUNn2zGQa6NK1KJSkTT_Gw6RCqBCHFy2SG3yGc6KSFNgKpOx8NhSDQ_t8J-gGgofOQQ92AhWjdIBapNgZk7sQi57CNYzDV2yiPKJNCQGRujh9TQACQZSjvOsUbrt0NiszslLqiq8PxfxAvmXdzn-hqyxnRW1Je8Q"
collectData(trianingDataUrl, testingDataUrl)
collectData = function(url1, url2){
train <- read.csv(url1)
test  <- read.csv(url2)
# push collected Data into global space; no multi-returns in R
train ->> trainData
test  ->> testData
}
collectData(trianingDataUrl, testingDataUrl)
?download.file()
setwd("C:\\Users\\mitcolli\\Documents\\Docs\\code\\Coursera\\DataSpec\\Machine Learning\\Project")
if(!dir.exists("data")){ dir.create("data")}
download.file(url1, destfile = "data/training.csv")
collectData = function(url1, url2){
if(!dir.exists("data")){ dir.create("data")}
download.file(url1, destfile = "data/training.csv")
download.file(url2, destfile = "data/testing.csv")
train <- read.csv("data/training.csv")
test  <- read.csv("data/testing.csv")
# push collected Data into global space; no multi-returns in R
train ->> trainData
test  ->> testData
}
collectData(trianingDataUrl, testingDataUrl)
collectData(trainingDataUrl, testingDataUrl)
testDataURl = "https://eventing.coursera.org/api/redirectStrict/Qc6T7BB7RVg2nSemuqUbhQ0sdtJZTTJQl-wCp1qpsVY08d5T2E6vy5jrOc6nNYzZvxndjFQ9QbkIiUNZOsgZcg.Y7LLZ5woJtigj1k2FTLmwA.64l5XrOiPtGcCW8eKBcbM6MzAkKnAaz_5lpKgA6TdotjzOFT3PmiIh3fQ6_HaFEUOkVatENllGtub9WyVi0OccD4yznCfr4pFBSUHPvQidPZzc3k5AWjhenWtWXkVt2VuQfkOI7mkSCuHzLyAb1Rq6KyFNMIe_6Nu4kgT5bgGIhZrPqyPsIOXfUgIzeJbrUUH-5s2aMehCHxuRRYwqVsBQP5crSotABhvyGz2sBqiBK7KYK8uKbJ4XuUNn2zGQa6NK1KJSkTT_Gw6RCqBCHFy2SG3yGc6KSFNgKpOx8NhSDQ_t8J-gGgofOQQ92AhWjdIBapNgZk7sQi57CNYzDV2yiPKJNCQGRujh9TQACQZSjvOsUbrt0NiszslLqiq8PxfxAvmXdzn-hqyxnRW1Je8Q"
collectData(trainingDataUrl, testDataUrl)
collectData(trainDataUrl, testDataUrl)
trainDataURL = "https://eventing.coursera.org/api/redirectStrict/CwuaazM9omqkquUb0kdE2WvGIqJWicejJ8kjpkB78yXFFlkDBFgr3Zgk1SFCMk4jGOPWMIvJ4uOqfAnf8exPpA.dVzkb1v7Is_JCDbfEkqecA.lD2kq0SU6lv2BDl7rsQIzR57PZ87TCjxLvpNgPQQf8L-fxIjZ_TjZDeWqJ3A8eKHvrpshTdzRoeZKt1IWPMwQA6FOTnQJpsiFqkKVFBphqqBXynjwE6pPiLOWu4FP3Q9tiWN80k4bAehhH3xKTaOT0qfKZjqplvV2xQ1ChHe9Se4Uxw3xESl-N2MdJ_zV2RkgUC8zfjLrhms-o0gQUzSvp6BIQDEVg9mAQX3KGKQBRu5UpAyaM9VhgLD5tmbO-LcucvtaqrOYWPIp3lY-80n3mBY4yH9sZ3ldf7BnnpTv13zWvvBgdzXLM9R1pJRo7hHxeAu1OX3dou3OqD1NbkKGWtLFlUvcZZ_qCwUb4SzzAhuVMWXCZh9o3fYAxZbINKTw3UVoDIKzhW-iI4mBIlsow"
testDataURl = "https://eventing.coursera.org/api/redirectStrict/Qc6T7BB7RVg2nSemuqUbhQ0sdtJZTTJQl-wCp1qpsVY08d5T2E6vy5jrOc6nNYzZvxndjFQ9QbkIiUNZOsgZcg.Y7LLZ5woJtigj1k2FTLmwA.64l5XrOiPtGcCW8eKBcbM6MzAkKnAaz_5lpKgA6TdotjzOFT3PmiIh3fQ6_HaFEUOkVatENllGtub9WyVi0OccD4yznCfr4pFBSUHPvQidPZzc3k5AWjhenWtWXkVt2VuQfkOI7mkSCuHzLyAb1Rq6KyFNMIe_6Nu4kgT5bgGIhZrPqyPsIOXfUgIzeJbrUUH-5s2aMehCHxuRRYwqVsBQP5crSotABhvyGz2sBqiBK7KYK8uKbJ4XuUNn2zGQa6NK1KJSkTT_Gw6RCqBCHFy2SG3yGc6KSFNgKpOx8NhSDQ_t8J-gGgofOQQ92AhWjdIBapNgZk7sQi57CNYzDV2yiPKJNCQGRujh9TQACQZSjvOsUbrt0NiszslLqiq8PxfxAvmXdzn-hqyxnRW1Je8Q"
trainDataUrL = "https://eventing.coursera.org/api/redirectStrict/CwuaazM9omqkquUb0kdE2WvGIqJWicejJ8kjpkB78yXFFlkDBFgr3Zgk1SFCMk4jGOPWMIvJ4uOqfAnf8exPpA.dVzkb1v7Is_JCDbfEkqecA.lD2kq0SU6lv2BDl7rsQIzR57PZ87TCjxLvpNgPQQf8L-fxIjZ_TjZDeWqJ3A8eKHvrpshTdzRoeZKt1IWPMwQA6FOTnQJpsiFqkKVFBphqqBXynjwE6pPiLOWu4FP3Q9tiWN80k4bAehhH3xKTaOT0qfKZjqplvV2xQ1ChHe9Se4Uxw3xESl-N2MdJ_zV2RkgUC8zfjLrhms-o0gQUzSvp6BIQDEVg9mAQX3KGKQBRu5UpAyaM9VhgLD5tmbO-LcucvtaqrOYWPIp3lY-80n3mBY4yH9sZ3ldf7BnnpTv13zWvvBgdzXLM9R1pJRo7hHxeAu1OX3dou3OqD1NbkKGWtLFlUvcZZ_qCwUb4SzzAhuVMWXCZh9o3fYAxZbINKTw3UVoDIKzhW-iI4mBIlsow"
testDataUrl = "https://eventing.coursera.org/api/redirectStrict/Qc6T7BB7RVg2nSemuqUbhQ0sdtJZTTJQl-wCp1qpsVY08d5T2E6vy5jrOc6nNYzZvxndjFQ9QbkIiUNZOsgZcg.Y7LLZ5woJtigj1k2FTLmwA.64l5XrOiPtGcCW8eKBcbM6MzAkKnAaz_5lpKgA6TdotjzOFT3PmiIh3fQ6_HaFEUOkVatENllGtub9WyVi0OccD4yznCfr4pFBSUHPvQidPZzc3k5AWjhenWtWXkVt2VuQfkOI7mkSCuHzLyAb1Rq6KyFNMIe_6Nu4kgT5bgGIhZrPqyPsIOXfUgIzeJbrUUH-5s2aMehCHxuRRYwqVsBQP5crSotABhvyGz2sBqiBK7KYK8uKbJ4XuUNn2zGQa6NK1KJSkTT_Gw6RCqBCHFy2SG3yGc6KSFNgKpOx8NhSDQ_t8J-gGgofOQQ92AhWjdIBapNgZk7sQi57CNYzDV2yiPKJNCQGRujh9TQACQZSjvOsUbrt0NiszslLqiq8PxfxAvmXdzn-hqyxnRW1Je8Q"
collectData(trainDataUrL, testDataUrl)
train <- read.csv("data/pml-training.csv")
test  <- read.csv("data/pml-testing.csv")
train ->> trainData
test  ->> testData
collectData()
collectData = function(){
if(!dir.exists("data")){ dir.create("data")}
#download.file(url1, destfile = "data/pml-training.csv")
#download.file(url2, destfile = "data/pml-testing.csv")
train <- read.csv("data/pml-training.csv")
test  <- read.csv("data/pml-testing.csv")
# push collected Data into global space; no multi-returns in R
train ->> trainData
test  ->> testData
}
collectData()
colnames(train)
str(train)
library(RWeka)
as.data.table(train) ->> trainData
as.data.table(test)  ->> testData
OnePredict <- OneR(classe ~., data = train)
OnePredict
head(train$classe)
library(caret)
RMSE()
knn3(train)
?kknn3
?knn3
rpartFit <- train(classe ~ ., data = train, method = "rpart")
